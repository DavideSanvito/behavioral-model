PD_GEN_DIR:= ../../../pd_gen
CC:= gcc
CXX:= g++
COMMON_FLAGS:=
CFLAGS:= -O0 -g -Wall
CPPFLAGS:= -O0 -g -Wall --std=c++11


INDIGO_DIR:=../../../modules/bfofagent/submodules/indigo/
INCS:=$(INDIGO_DIR)/modules/OFConnectionManager/module/inc $(INDIGO_DIR)/submodules/infra/modules/AIM/module/inc $(INDIGO_DIR)/modules/indigo/module/inc $(INDIGO_DIR)/submodules/loxigen-artifacts/loci/inc  $(INDIGO_DIR)/modules/SocketManager/module/inc $(INDIGO_DIR)/modules/OFStateManager/module/inc 
LIB_DIR:= $(INDIGO_DIR)/targets/utests/OFConnectionManager/build/gcc-local/lib
LIBS:= $(LIB_DIR)/OFStateManager.a $(LIB_DIR)/OFConnectionManager.a $(LIB_DIR)/AIM.a $(LIB_DIR)/SocketManager.a $(LIB_DIR)/indigo.a $(LIB_DIR)/loci.a $(LIB_DIR)/cjson.a $(LIB_DIR)/Configuration.a $(LIB_DIR)/debug_counter.a $(LIB_DIR)/timer_wheel.a $(LIB_DIR)/BigRing.a $(LIB_DIR)/OS.a $(LIB_DIR)/BigHash.a $(LIB_DIR)/minimatch.a $(LIB_DIR)/BigList.a 

TARGET:=corsa_test

BUILD_DIR := build
BUILD_DIRS := $(BUILD_DIR)

srcs_C:=$(realpath $(dir $(lastword $(MAKEFILE_LIST)))openflow_helper.c)
srcs_CXX:= $(realpath $(dir $(lastword $(MAKEFILE_LIST)))corsa_test.cpp)

include $(PD_GEN_DIR)/libpdfixed/libpdfixed.mk
include $(PD_GEN_DIR)/libpd/libpd.mk
include thrift_endpoint/module.mk

CFLAGS += $(COMMON_FLAGS) -fpermissive -Wsign-compare
CPPFLAGS += $(COMMON_FLAGS) -fpermissive -Wsign-compare

srcs := $(srcs_C) $(srcs_CXX)
BUILD_DIRS += $(patsubst %, $(BUILD_DIR)%, $(sort $(realpath $(dir $(srcs)))))

CFLAGS += $(patsubst %, -I%, $(INCS))
CPPFLAGS += $(patsubst %, -I%, $(INCS))

objs_C := $(patsubst %.c, %.o, $(srcs_C))
objs_CXX := $(patsubst %.cpp, %.o, $(srcs_CXX))

objs := $(objs_C) $(objs_CXX)

deps_C := $(patsubst %.c, %.d, $(srcs_C))
deps_CXX := $(patsubst %.cpp, %.d, $(srcs_CXX))

deps := $(deps_C) $(deps_CXX)

deps_C_ := $(patsubst %, $(BUILD_DIR)%, $(deps_C))
deps_CXX_ := $(patsubst %, $(BUILD_DIR)%, $(deps_CXX))
deps_ := $(patsubst %, $(BUILD_DIR)%, $(deps))
objs_C_ := $(patsubst %, $(BUILD_DIR)%, $(objs_C))
objs_CXX_ := $(patsubst %, $(BUILD_DIR)%, $(objs_CXX))
objs_ := $(patsubst %, $(BUILD_DIR)%, $(objs))

# LIBS := $(sort $(LIBS))

$(TARGET): $(objs_) | $(BUILD_DIRS)
	$(CXX) -o $@ $^ $(LIBS)

check: $(TARGET)
	./run_tests.sh

$(BUILD_DIRS):
	mkdir -p $@

$(objs_) $(deps_) : .thrift_gen

.thrift_gen: .pd_from_json

TEMPLATES_DIR := $(PD_GEN_DIR)/templates
TEMPLATES_CPP := $(wildcard $(TEMPLATES_DIR)/src/*.cpp)
TEMPLATES_H := $(wildcard $(TEMPLATES_DIR)/include/pd/*.h)

.pd_from_json: ../corsa.json $(PD_GEN_DIR)/gen-cpp/src/pd_tables.cpp $(TEMPLATES_CPP) $(TEMPLATES_H)
	$(PD_GEN_DIR)/gen.py --json ../corsa.json --p4-prefix corsa
	@touch .pd_from_json

$(deps_C_): $(BUILD_DIR)%.d: %.c | $(BUILD_DIRS)
	$(CC) $(CFLAGS) $(INC) -MM $< -MT $(BUILD_DIR)$*.o -o $(BUILD_DIR)$*.d

$(deps_CXX_): $(BUILD_DIR)%.d: %.cpp | $(BUILD_DIRS)
	$(CXX) $(CPPFLAGS) $(INC) -MM $< -MT $(BUILD_DIR)$*.o -o $(BUILD_DIR)$*.d

ifeq ($(MAKECMDGOALS),clean)
# doing clean, so dont make deps.
else
# doing build, so make deps.
-include $(deps_)
endif

$(objs_C_): $(BUILD_DIR)%.o: %.c | $(BUILD_DIRS)
	$(CC) $(CFLAGS) $(INC) -c -o $(BUILD_DIR)$*.o $<

$(objs_CXX_): $(BUILD_DIR)%.o: %.cpp | $(BUILD_DIRS)
	$(CXX) $(CPPFLAGS) $(INC) -c -o $(BUILD_DIR)$*.o $<

clean: .thrift_gen_clean
	rm -rf $(BUILD_DIRS) $(TARGET)
	rm -f *.o *.d
	rm -f corsa.output
	rm -rf .pd_from_json

.PHONY: clean
